In this exercice we are provided with a class NoEntry that has private constructors and a friend class PrivilegedOne with a vector of NoEntry objects. We are asked why we can't push_back new NoEntry objects in this vector.

This is because NoEntry does not meet the copy and insert requirements of push_back, which means, std::vector::push_back needs at least a public copy constructor for the items stored. push_back() will need to copy items into the internal storage array, and copy again when it comes to reallocating storage.

We thought that one way of solving this is not storing NoEntry objects in the vector, but pointers.

The final solution we have implemented consists on a Wrapper class PrivilegedTwo that is a friend of NoEntry. This class has a member content that is a NoEntry object. And we've changed the vector declaration so now it is a vector of PrivilegedTwo objects. As PrivilegedTwo has its constructors public and it is a friend class of NoEntry the vector is able to create it.
