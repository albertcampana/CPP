The issue with exit calls is that they terminate the program completely, and not all errors shoud terminate a program, often it can recover.
Exit does not call all destructors, except for global or static objects. Which can cause memory leaks.
When using exceptions, you know where the program will terminate and be sure to call all the destructors.

Exceptions provide a mean to break a function (and program) normal flow, without the need to terminate the program using blunt tools like the function exit.
With exceptions you have more information about what went wrong with the program.
C++ destroys all objects in scope after an exception occurs, thereby reducing resource usage.

Another interesting feature of the exceptions is that, when an exception couldn't be catched by any of the catch handlers of a try-block, it is automatically propagated to an outter try-block.
Having this in mind, knowing that all data types may be thrown as exceptions, if you are using external libraries, you can make sure that an exception won't be lost inside the library.

In the out.txt file we can see how the catch handler prints the first cout but not the second since the program has been terminated with the exit(3).
