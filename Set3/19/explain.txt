In this question we are required to understand the construction/destruction order when using inheritance. We are asked to explain why certain order is followed.

When we create an object of derived class, all of the members of derived class must be initialized but the inherited members in derived class can only be initialized by the base classâ€™s constructor as the definition of these members exists in base class only. This is why the constructor of base class is called first to initialize all the inherited members.

The Derived class must be destructed always before the Base class does. Because if you need a base class member to correctly destroy the derived object, you won't be able to do so. For example: if you have an int size in the base class, the derived will reserve this space, but the base class won't be able to free this space later on, which would create a memory leak.

The example provided (main.cc) does the following:
We first declare a public member inside the Base class. The purpose of the example is to make the Derived class print this member from the Base class. 
If we first called the Derived constructor, the derived object would not be able to access the public member declared inside the Base class because this hasn't yet been initialized.
Calling the Base class constructor first, followed by the Derived constructor, we avoid the issue. The Base class initializes all the inherited members so that the derived class has access to them.
Same would happen if we call the destructor of the Base object before the Derived destructor.


You never need to explicitly call the destructor except when using placement new, then the user is in charge of destructing such object. The reason why we only need to call the Derived destructor and not also the Base destructor, is because once the Derived object is destructed, if base class has no more dependencies and once it gets out of scope, then it's destructor will be called automatically. This can not happen in the reverse order because it would cause memory leaks.
