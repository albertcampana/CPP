This question is related to access specifiers in C++ inheritance. We are asked to discuss the three different keywords (public, protected, and private).

PUBLIC Inheritance: makes public members of the base class public in the derived class, and the protected members of the base class remain protected in the derived class. Both the users and the designer can access all public and protected members.

PROTECTED Inheritance: makes all public and protected members from the base class protected in the derived class. Any other code (outside the inheritance tree) is unable to access the base class's members. Users can now access both public and protected methods from the base class, but they are both seen as protected in all the inheritance tree. Designers can access all public and protected methods but are seen as protected.

PRIVATE Inheritance: makes the public and protected members of the base class private in the derived class, so base class members can not be used elsewhere. The designer can access all methods seen as private. And the user won't be able to access any method.
