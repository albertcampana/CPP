In this question, we are asked to create a program that receives a Base class reference and calls for a Derived member.

When a function is called using a pointer to an object, then the type of the pointer (and not the type of the object) determines which member functions are available and can be executed.
To execute the Derived::hello(), we do a static_cast.

This is bad practice because if the base object pointer is not pointing to a Derived object, then this may produce unexpected results. This is what we have done in main.cc. The first call to caller() works perfectly because we are passing a Derived object. On the second call, we are passing a Base object and this causes a "core dumped" segmentation fault. (As seen on the out.txt file)
